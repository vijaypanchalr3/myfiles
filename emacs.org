#+title: New configuration file
#+PROPERTY: header-args:emacs-lisp :tangle /home/vijay/.emacs :mkdirp yes
#+STARTUP: hideblocks

*Welcome to RisEmacs, my personal config files ,*

*documentation for org babel languages*: [[https://orgmode.org/worg/org-contrib/babel/languages/index.html]]
*Emacs from Scratch link*:
[[https://github.com/daviwil/emacs-from-scratch]]

*Emacs from Scratch Confguration*:
[[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org]] 


* General settings 
** Encoding system

#+begin_src emacs-lisp


  ;; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
  (setq utf-translate-cjk-mode nil)
  (set-language-environment 'utf-8)
  (setq locale-coding-system 'utf-8)
  ;; set the default encoding system
  (prefer-coding-system 'utf-8)
  (setq default-file-name-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  ;; backwards compatibility as default-buffer-file-coding-system
  ;; is deprecated in 23.2.
  (if (boundp buffer-file-coding-system)
      (setq buffer-file-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8))
  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))


#+end_src
** Package system

This is code initializing melpa with updated elpa and org mode. which i copied from [[https://melpa.org/#/getting-started][melpa website]] and edited from *emacs from scratch* page.


#+begin_src emacs-lisp



  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
  ;; and `package-pinned-packages`. Most users will not need or want to do this.
  ;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq inhibit-startup-message t)



#+end_src
* Setting variables

#+begin_src emacs-lisp


    ;; set transparency
    ;;(set-frame-parameter (selected-frame) 'alpha '(90 90))
    ;;(add-to-list 'default-frame-alist '(alpha 90 90))
    (custom-set-variables
     '(column-number-mode t)
     ;;'(custom-enabled-themes '(tango))
     ;;'(custom-safe-themes
     ;; 
     ;;)
     '(display-time-mode t)
     '(electric-pair-mode t)
     '(solaire-global-mode t)
     '(font-use-system-font nil)
     '(global-display-line-numbers-mode t)
     '(menu-bar-mode nil)
     '(org-fontify-done-headline nil)
     '(org-fontify-todo-headline nil)
     '(package-selected-packages
       '(mixed-pitch writeroom-mode company-box lsp-mode visual-fill-column org-bullets helpful doom-modeline doom-themes magit))
     '(scroll-bar-mode nil)
     '(show-paren-mode t)
     '(size-indication-mode t)
     '(window-divider-mode t)
     '(tool-bar-mode nil)
     '(save-place-mode t))
    (set-face-attribute 'default nil :font "JetBrains Mono NL" :height 110)
  ;; Your customisations here.  For example:
  ;; (setq modus-themes-bold-constructs t
  ;;       modus-themes-mode-line '3d) 

  ;; Load the theme files before enabling a theme (else you get an error).

  ;; Enable the theme of your preference:

       ;; Optionally add a key binding for the toggle between the themes:
  ;;(modus-themes-load-themes)
  ;;(define-key global-map (kbd "<f5>") #'modus-themes-toggle)
  (setq ring-bell-function 'ignore)

  ;;(use-package modus-themes)
#+end_src
* Custom dolists

#+begin_src emacs-lisp


  (dolist (mode '(org-mode-hook
                       vterm-mode-hook
                       eshell-mode-hook
                       markdown-mode-hook
                       helpful-mode-hook
                       Custom-mode-hook
                       LaTeX-mode-hook
                       text-mode-hook
                       inferior-python-mode-hook
                       dired-mode-hook
                       neotree-mode-hook
                       image-mode-hook
                       help-mode-hook
                       calc-mode-hook
                       calc-trail-mode-hook))
        (add-hook mode(lambda () (display-line-numbers-mode 0))))
      (dolist (mode '(neotree-mode-hook
                      dashboard-mode-hook
                      image-mode-hook
                      vterm-mode-hook
                      magit-mode-hook
                      help-mode-hook
                      package-menu-mode-hook
                      calc-mode-hook
                      text-mode-hook
                      calc-trail-mode-hook))
        (add-hook mode(lambda () (hide-mode-line-mode 1))))
      (dolist (mode '(org-mode-hook))
        (add-hook mode(lambda () (org-num-mode 1))))
      (setq-default line-spacing 4)



#+end_src
* Better UX experience
** Ivy

#+begin_src emacs-lisp


(use-package ivy
  :diminish
  :bind (:map ivy-minibuffer-map
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
(ivy-explorer-mode 1)
(use-package ivy-prescient
    :after counsel
    :config
    (ivy-prescient-mode 1))
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))


#+end_src
** Which-key

#+begin_src emacs-lisp


(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))


#+end_src
** Counsel

#+begin_src emacs-lisp


(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :config
  (counsel-mode 1))


#+end_src
** Helpful

#+begin_src emacs-lisp


(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))


#+end_src
** Rainbox indentation

#+begin_src emacs-lisp


(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))


#+end_src
* Modeline

#+begin_src emacs-lisp

    (use-package all-the-icons)
    ;; (use-package doom-modeline
    ;;   :init (doom-modeline-mode 1)
    ;;   :config
    ;;   (setq doom-modeline-height 25)
    ;;   (setq doom-modeline-buffer-modification-icon t)
    ;;   (setq doom-modeline-hud nil)
    ;;   (setq doom-modeline-bar-width 20)
    ;;   (setq doom-modeline-modal-icon t)
    ;;   (setq doom-modeline-window-width-limit fill-column)
    ;;   (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
    ;;   (setq doom-modeline-buffer-modification-icon nil)
    ;;   (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode)))

(use-package nano-modeline
    :init (nano-modeline-mode 1))
(setq no-mode-line t)
#+end_src
* Key-bindings 
** Basic kbds

#+begin_src emacs-lisp


  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  ;;vterm keybinds  
  (global-set-key [f2] 'vterm-toggle)
  (global-set-key [C-f2] 'vterm-toggle-cd)
  (global-set-key [f6] 'calc)
  (global-set-key (kbd "C-x <up>") 'windmove-up)
  (global-set-key (kbd "C-x <down>") 'windmove-down)
  (global-set-key (kbd "C-x <left>") 'windmove-left)
  (global-set-key (kbd "C-x <right>") 'windmove-right)
  (global-set-key (kbd "M-p") 'flyspell-correct-at-point)
  (global-set-key (kbd "C-)") 'display-line-numbers-mode)
  (global-set-key (kbd "C-(") 'hide-mode-line-mode)
  ;; (global-unset-key (kbd "C-n"))
  ;; (global-unset-key (kbd "C-p"))
  ;; (global-unset-key (kbd "C-f"))
  ;; (global-unset-key (kbd "C-b"))
  ;; (global-unset-key (kbd "C-h"))
  ;; (global-unset-key (kbd "C-j"))
  ;; (global-unset-key (kbd "C-k"))
  ;; (global-unset-key (kbd "C-l"))
  ;; (global-set-key (kbd "C-n") 'electric-newline-and-maybe-indent)
  ;; (global-set-key (kbd "C-f") 'kill-line)
  ;; (global-set-key (kbd "C-h") 'backward-char)
  ;; (global-set-key (kbd "C-l") 'forward-char)
  ;; (global-set-key (kbd "C-j") 'next-line)
  ;; (global-set-key (kbd "C-k") 'previous-line)


#+end_src
* Org-mode

Emacs Org mode is super Powerful and super customizable. this is small customization of emacs org mode.
*Org Mode Links* : [[https://orgmode.org/][Homepage]], [[https://orgmode.org/manual/][Manual]]
** Basic customization for Org mode

#+begin_src emacs-lisp

  (use-package org
    :config
    (setq org-ellipsis " "
            org-hide-emphasis-markers t))
  (add-hook 'org-mode-hook 'org-overview)
    ;; (setq-default line-spacing 0)
  (provide 'emacs-orgmode-config)
  (setq org-log-done nil)
  (setq org-adapt-indentation nil)
  ;;(setq org-startup-truncated t)
  (setq global-page-break-line-mode t)
  ;; (setq header-line-format " ")
  (customize-set-variable 'org-blank-before-new-entry 
                        '((heading . nil)
                          (plain-list-item . nil)))
  (setq org-cycle-separator-lines 1)
  (setq backup-directory-alist `(("." . "~/.saves")))
  ;; (setq make-backup-files nil)
  (setq org-html-coding-system 'utf-8-unix)
  (eval-after-load "org"
    '(require 'ox-gfm nil t))
  (setq org-html-table-default-attributes
        '(:border "0" :cellspacing "0" :cellpadding "6" :rules "none" :frame "none"))


#+end_src
** Org-bullets

#+begin_src emacs-lisp


  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
  (setq org-bullets-bullet-list '("  "))
  (setq org-indent-indentation-per-level 1)
  (setq org-adapt-indentation nil)
  (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) " "))))))
   ;; (dolist (face '((org-level-1 . 1.2)
   ;;                 (org-level-2 . 1.2)
   ;;                 (org-level-3 . 1.2)
   ;;                 (org-level-4 . 1.2)
   ;;                 (org-level-5 . 1.2)
   ;;                 (org-level-6 . 1.2)
   ;;                 (org-level-7 . 1.0)
   ;;                 (org-level-8 . 1.0)))
   ;;   (set-face-attribute (car face) nil :weight 'bold :height (cdr face)))


#+end_src
:custom
  (org-bullets-bullet-list '(" "" "" "" "" "" "" "))
** Margin setting for Org mode


#+begin_src emacs-lisp


  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 150
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1)
    (visual-line-mode 1)
    (variable-pitch-mode 1))
    ;;(writeroom-mode 1)
    ;;(electric-pair-mode 0)
    ;;(org-indent-mode 1)

  (use-package visual-fill-column
    :hook '((org-mode . efs/org-mode-visual-fill)))
  (add-hook 'markdown-mode-hook 'efs/org-mode-visual-fill)
  (add-hook 'text-mode-hook 'efs/org-mode-visual-fill)
  (add-hook 'org-mode-hook 'org-indent-mode)
  ;; :hook '((text-mode . efs/org-mode-visual-fill))
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)


#+end_src
** Font setting for Org mode
 djk fk fkdjsfe abcdfghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ =Abcsfljfl= *dkfaj jkjkjkd* /fjkjskl/ /asdfhjhjhj/ 
#+begin_src emacs-lisp

  (use-package mixed-pitch
    :hook
    ;; If you want it in all text modes:
    (text-mode . mixed-pitch-mode)
    :config
    (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono NL" :height 110)
    (set-face-attribute 'variable-pitch nil :font "Noto Serif" :height 140))
  (custom-theme-set-faces
       'user
       '(org-block ((t (:inherit fixed-pitch))))
       '(org-code ((t (:inherit (shadow fixed-pitch)))))
       '(org-document-title ((t (:height 140 :weight bold))))
       '(org-tag ((t (:height 100))))
       '(org-special-keyword ((t (:height 100))))
       '(org-document-info ((t (:height 100))))
       '(org-document-info-keyword ((t (:height 100))))
       '(org-property-value ((t (:height 100))))
       '(org-meta-line ((t (:height 100))))
       '(org-verbatim ((t (:inherit fixed-pitch))))
       '(org-block-begin-line ((t (:height 100))))
       '(org-block-end-line ((t (:height 100))))
       '(org-drawer ((t (:height 100))))
       ;;'(org-date ((t (:inherit variable-pitch)))
       '(org-link ((t (:underline t)))))


#+end_src
** Emacs-Org-Babel language support

This is give way to use language in emacs org mode for execution.

 #+begin_src emacs-lisp


   (setq org-confirm-babel-evaluate nil)
   (setq org-babel-python-command "python3")
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))


 #+end_src
** Tangle automation
This block help me to tangle automatically everytime i save this file.d

 #+begin_src emacs-lisp


(defun efs/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "/home/vijay/myfiles/emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))
(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))


 #+end_src

 #+RESULTS:
** LaTeX Preview inside org

Well, First you need *dvipng*  from package manager and also, *texlive-extra*. This will help to produce Latex png files.

Techniqly, i can use imagemagick and i always have that but i think that's too big for such task.

#+begin_src emacs-lisp


(setq org-latex-create-formula-image-program 'dvipng)
(plist-put org-format-latex-options :scale 2)


#+end_src
** Bullets-setting
This all functionality copy pasted from this site > [[https://thibautbenjamin.github.io/emacs/org-icons]]
I will make bullets iconful,
*** Removing todo keywords
#+begin_src emacs-lisp

  (setq org-todo-keywords
        '(
          (sequence "IDEA(i)" "TODO(t)" "STARTED(s)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)")
          (sequence "|" "CANCELED(c)" "DELEGATED(l)" "SOMEDAY(f)")))
  ;;  ("TODO" . (:foreground "#24448C" :weight bold))
  (setq org-todo-keyword-faces
        '(("IDEA" . (:foreground "#F8BC5C" :weight bold))
          ("NEXT" . (:foreground "#74A466" :weight bold))
          ("STARTED" . (:foreground "#DC4424" :weight bold))
          ("WAITING" . (:foreground "#CCA4A0" :weight bold))
          ("CANCELED" . (:foreground "LimeGreen" :weight bold))
          ("DELEGATED" . (:foreground "LimeGreen" :weight bold))
          ("SOMEDAY" . (:foreground "LimeGreen" :weight bold))))
  (setq org-fast-tag-selection-single-key t)
  (setq org-use-fast-todo-selection t)
  (setq org-reverse-note-order t)


#+end_src
** Source block customization
#+begin_src emacs-lisp

  ;; (org-block-begin-line
  ;;  ((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
  ;; (org-block-background
  ;;  ((t (:background "#FFFFEA"))))
  ;; (org-block-end-line
  ;;  ((nil )))


#+end_src
** Olivetti mode
#+begin_src emacs-lisp

    ;; Distraction-free screen
    (use-package olivetti
      :init
      (setq olivetti-body-width .67)
      :config
      (defun distraction-free ()
        "Distraction-free writing environment"
        (interactive)
          (if (equal olivetti-mode nil)
              (progn
                (window-configuration-to-register 1)
                (delete-other-windows)
                (text-scale-increase 2)
                (olivetti-mode t)
                (hide-mode-line-mode t)
                (flyspell-mode t))
            (progn
              (jump-to-register 1)
              (olivetti-mode 0)
              (text-scale-decrease 2))))
        :bind
        (("<f9>" . distraction-free)))


#+end_src
* Markdown-mode
#+begin_src emacs-lisp


(add-hook 'markdown-mode-hook 'markdown-toggle-markup-hiding)


#+end_src
* Structural Templates

 #+begin_src emacs-lisp

   (with-eval-after-load 'org
     ;; This is needed as of Org 9.2
     (require 'org-tempo)

     (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("py" . "src python"))
     (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
     (add-to-list 'org-structure-template-alist '("cpp" . "src c++")))


#+end_src
* Org-Roam

This is my first configuration and use of famous org roam.
#+begin_src emacs-lisp


  (setq org-roam-directory (file-truename "~/org-roam"))
  (use-package org-roam
    :after org
    :config
    (org-roam-setup)
    :custom
    (org-roam-capture-templates
     '(("d" "default" plain
        "\n\n\n%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("b" "book notes" plain
        "\n*Author* : %^{Author} \n*Title* : ${title} \n\n\n\n%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: book")
        :unnarrowed t)))
    :bind (("C-c n f" . org-roam-node-find)
           ("C-c n r" . org-roam-node-random)		    
           (:map org-mode-map
                 (("C-c n i" . org-roam-node-insert)
                  ("C-c n o" . org-id-get-create)
                  ("C-c n t" . org-roam-tag-add)
                  ("C-c n a" . org-roam-alias-add)
                  ("C-c n l" . org-roam-buffer-toggle)))))
  (setq org-roam-completion-everywhere t)
  (setq org-roam-capture-templates '(("d" "default" plain "%?"
                                      :if-new
                                      (file+head "${slug}.org"
                                                 "#+title: ${title}\n#+date: %u\n#+lastmod: \n\n")
                                      :immediate-finish t))
        time-stamp-start "#\\+lastmod: [\t]*")


#+end_src
* LSP
LSP mode is single hand funcyion for making emacs ide.
- [[https://emacs-lsp.github.io/lsp-mode/][Official website]]
- [[https://clangd.llvm.org/][c++ server clangd]]
- [[https://github.com/microsoft/pyright][github page for *pyright* a python server]]
- [[https://company-mode.github.io/][company-mode official site]]
- latex is still outside of functionality
** LSP- configuration
#+begin_src emacs-lisp


  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
      (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
      (lsp-enable-which-key-integration t))
  (add-hook 'lsp-configure-hook (lambda ()
                         (lsp-headerline-breadcrumb-mode -1)))


#+end_src
** Language configuration
*** CSS

#+begin_src emacs-lisp


  (use-package css-mode
    :mode "\\.css\\'"
    :hook (css-mode . lsp-deferred)
    :config
    (setq css-indent-level 4))


#+end_src
*** Python

#+begin_src emacs-lisp

   (use-package python-mode
     :ensure nil
     :hook (python-mode . lsp-deferred))

   (setq python-shell-interpreter "python3.9")
   (setq python-shell-interpreter-args "-i")
   (use-package lsp-pyright
     :ensure t
     :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp))))  ; or lsp-deferred


#+end_src
*** C and C++
#+begin_src emacs-lisp

  ;; (add-hook 'c++-mode-hook 'lsp)
  ;; (add-hook 'c-mode-hook 'lsp)
  ;; ;;(add-hook 'objc-mode-hook 'irony-mode)


#+end_src
*** Rust
#+begin_src emacs-lisp


  ;; (use-package rustic
  ;;   :ensure
  ;;   :bind (:map rustic-mode-map
  ;;               ("M-j" . lsp-ui-imenu)
  ;;               ("M-?" . lsp-find-references)
  ;;               ("C-c C-c l" . flycheck-list-errors)
  ;;               ("C-c C-c a" . lsp-execute-code-action)
  ;;               ("C-c C-c r" . lsp-rename)
  ;;               ("C-c C-c q" . lsp-workspace-restart)
  ;;               ("C-c C-c Q" . lsp-workspace-shutdown)
  ;;               ("C-c C-c s" . lsp-rust-analyzer-status))
  ;;   :config
  ;;   ;; uncomment for less flashiness
  ;;   ;; (setq lsp-eldoc-hook nil)
  ;;   ;; (setq lsp-enable-symbol-highlighting nil)
  ;;   ;; (setq lsp-signature-auto-activate nil)

  ;;   ;; comment to disable rustfmt on save
  ;;   (setq rustic-format-on-save t)
  ;;   (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))
  ;; (defun rk/rustic-mode-hook ()
  ;;   ;; so that run C-c C-c C-r works without having to confirm, but don't try to
  ;;   ;; save rust buffers that are not file visiting. Once
  ;;   ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
  ;;   ;; no longer be necessary.
  ;;   (when buffer-file-name
  ;;     (setq-local buffer-save-without-query t)))


#+end_src
** Company

#+begin_src emacs-lisp


  (use-package company
    :after lsp-mode
    :hook '((lsp-mode . company-mode)
            (prog-mode . company-mode))
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))
  (use-package company-box
    :hook (company-mode . company-box-mode))
  (setq company-box-icons-alist 'company-box-icons-all-the-icons
        company-box-icons-all-the-icons
        (let ((all-the-icons-scale-factor 1)
              (all-the-icons-default-adjust 0))
          `((Unknown       . ,(all-the-icons-faicon "question" :face 'all-the-icons-purple)) ;;question-circle is also good
            (Text          . ,(all-the-icons-faicon "file-text-o" :face 'all-the-icons-green))
            (Method        . ,(all-the-icons-faicon "cube" :face 'all-the-icons-dcyan))
            (Function      . ,(all-the-icons-faicon "cube" :face 'all-the-icons-dcyan))
            (Constructor   . ,(all-the-icons-faicon "cube" :face 'all-the-icons-dcyan))
            (Field         . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
            (Variable      . ,(all-the-icons-faicon "tag" :face 'all-the-icons-dpurple))
            (Class         . ,(all-the-icons-faicon "cog" :face 'all-the-icons-red))
            (Interface     . ,(all-the-icons-faicon "cogs" :face 'all-the-icons-red))
            (Module        . ,(all-the-icons-alltheicon "less" :face 'all-the-icons-red))
            (Property      . ,(all-the-icons-faicon "wrench" :face 'all-the-icons-red))
            (Unit          . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
            (Value         . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
            (Enum          . ,(all-the-icons-faicon "file-text-o" :face 'all-the-icons-red))
            (Keyword       . ,(all-the-icons-material "format_align_center" :face 'all-the-icons-red :v-adjust -0.15))
            (Snippet       . ,(all-the-icons-material "content_paste" :face 'all-the-icons-red))
            (Color         . ,(all-the-icons-material "palette" :face 'all-the-icons-red))
            (File          . ,(all-the-icons-faicon "file" :face 'all-the-icons-red))
            (Reference     . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
            (Folder        . ,(all-the-icons-faicon "folder" :face 'all-the-icons-red))
            (EnumMember    . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
            (Constant      . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
            (Struct        . ,(all-the-icons-faicon "cog" :face 'all-the-icons-red))
            (Event         . ,(all-the-icons-faicon "bolt" :face 'all-the-icons-red))
            (Operator      . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
            (TypeParameter . ,(all-the-icons-faicon "cog" :face 'all-the-icons-red))
            (Template      . ,(all-the-icons-faicon "bookmark" :face 'all-the-icons-dgreen)))))


#+end_src
* Terminal

*vterm github page*:
[[https://github.com/akermu/emacs-libvterm]]

*Eshell Official page*:
[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html]]

I'm using vterm but i just congiguring Eshell

#+begin_src emacs-lisp


(defun efs/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))
(use-package eshell-git-prompt
  :after eshell)
(use-package eshell
  :hook (eshell-first-time-mode . efs/configure-eshell)
  :config
  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim")))
  (eshell-git-prompt-use-theme 'robbyrussell))
(use-package vterm
    :ensure t)


#+end_src
* splash screen
#+begin_src emacs-lisp


(require 'dashboard)
(dashboard-setup-startup-hook)
;; Or if you use use-package
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
  ;; Set the title
  ;; Makes *scratch* empty.
  (setq initial-scratch-message "")
  (defun remove-scratch-buffer ()
    (if (get-buffer "*scratch*")
        (kill-buffer "*scratch*")))
  (add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)
  ;; (setq dashboard-navigator-buttons
  ;;       `(;; line1
  ;;         ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
  ;;          "Homepage"
  ;;          "Browse homepage"
  ;;          (lambda (&rest _) (browse-url "homepage")))
  ;;         ("★" "Star" "Show stars" (lambda (&rest _) (show-stars)) warning)
  ;;         ("?" "" "?/h" #'show-help nil "<" ">"))
  ;;          ;; line 2
  ;;         ((,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
  ;;           "Linkedin"
  ;;           ""
  ;;           (lambda (&rest _) (browse-url "homepage")))
  ;;          ("⚑" nil "Show flags" (lambda (&rest _) (message "flag")) error))))
  (setq dashboard-banner-logo-title nil)
  (setq dashboard-startup-banner "~/.emacs.d/drawing2.png")
  (setq dashboard-center-content t)
  ;; To disable shortcut "jump" indicators for each section, set
  (setq dashboard-show-shortcuts t)
  (setq dashboard-items '((recents  . 15)
                          (bookmarks . 10)))
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons nil)
  ;;(dashboard-modify-heading-icons '((recents . "file-text")
  ;;                                  (bookmarks . "book")))
  (setq dashboard-set-navigator t)
  (setq dashboard-set-footer nil)


#+end_src
* NeoTree

#+begin_src emacs-lisp


(global-set-key [f8] 'neotree-toggle)
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))


#+end_src
* Latex mode
** Basic

#+begin_src emacs-lisp


(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'writeroom-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)


#+end_src
* MAN pages
#+begin_src emacs-lisp

  (add-hook 'Man-mode-hook 'display-line-numbers-mode)
  (add-hook 'Man-mode-hook 'hide-mode-line-mode)
  
#+end_src
* Hacks from systemcrafters
This  is code i took from Systemcrafters =linkfdjk= ,
#+begin_src emacs-lisp


  ;;saving customization opetion in custom file other than main file.
  (setq custom-file (locate-user-emacs-file "custom-var.el"))
  (load custom-file 'noerror 'nomessage)

  ;;fff
#+end_src
* Move Line Up or Down
#+begin_src emacs-lisp
(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

(global-set-key [(meta shift up)]  'move-line-up)
(global-set-key [(meta shift down)]  'move-line-down)
#+end_src
* dimmer
#+begin_src emacs-lisp
        (use-package dimmer
          :init (dimmer-mode 1)
          :custom (dimmer-fraction 0.2))
        (setq window-divider-default-bottom-width 4
              window-divider-default-right-width 4)
#+end_src
