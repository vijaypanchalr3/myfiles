
#+title New configuration file
#+PROPERTY: header-args:emacs-lisp :tangle /home/vijay/.emacs :mkdirp yes

*Welcome to RisEmacs, my personal config files ,*

*documentation for org babel languages*: [[https://orgmode.org/worg/org-contrib/babel/languages/index.html]]
*Emacs from Scratch link*:
[[https://github.com/daviwil/emacs-from-scratch]]

*Emacs from Scratch Confguration*:
[[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org]] 




* Index 

This is my whole configuration file.

** Encoding system

#+begin_src emacs-lisp
(modify-coding-system-alist 'file "" 'utf-8-with-signature-unix)
#+end_src

** Package system


This is code initializing melpa with updated elpa and org mode. which i copied from [[https://melpa.org/#/getting-started][melpa website]] and edited from *emacs from scratch* page.


#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)
#+end_src

This is also copied from *emacs from scratch*,

#+begin_src emacs-lisp

(unless package-archive-contents
  (package-refresh-contents))
(require 'use-package)
(setq use-package-always-ensure t)
(setq inhibit-startup-message t)

#+end_src

** Packages

#+begin_src emacs-lisp
;;(require 'mixed-pitch)
;;(require 'writeroom-mode)
;;(require 'company-box)
;;(require 'lsp-mode)
;;(require 'visual-fill-column)
;;(require 'org-bullets)
;;(require 'helpful)
;;(require 'doom-modeline)
;;(require 'doom-themes)
;;(require 'magit)
#+end_src
** Basic configuration

This is My basic configuration with gruvbox theme and some UI effects of emacs. Not that much but it's  enough.

*** Set variables

#+begin_src emacs-lisp
(custom-set-variables
 '(column-number-mode t)
 '(custom-enabled-themes '(doom-one-light))
 '(custom-safe-themes
   '("246a9596178bb806c5f41e5b571546bb6e0f4bd41a9da0df5dfbca7ec6e2250c" "7eea50883f10e5c6ad6f81e153c640b3a288cd8dc1d26e4696f7d40f754cc703" default)) 
 '(display-time-mode t)
 '(electric-pair-mode t)
 '(font-use-system-font nil)
 '(global-display-line-numbers-mode t)
 '(menu-bar-mode nil)
 '(org-fontify-done-headline nil)
 '(org-fontify-todo-headline nil)
 '(package-selected-packages
   '(mixed-pitch writeroom-mode company-box lsp-mode visual-fill-column org-bullets helpful doom-modeline doom-themes magit))
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(size-indication-mode t)
 '(tool-bar-mode nil))
#+end_src
*** Custom dolists

#+begin_src emacs-lisp
(dolist (mode '(org-mode-hook
		 vterm-mode-hook
		 eshell-mode-hook
		 helpful-mode-hook
		 Custom-mode-hook
           LaTeX-mode-hook
           text-mode-hook
	   inferior-python-mode-hook
           dired-mode-hook))
  (add-hook mode(lambda () (display-line-numbers-mode 0))))

(use-package dired
  :ensure nil
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-agho --group-directories-first")))
(use-package dired-single
  :commands (dired dired-jump))

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

*** Icons
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

*** Modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 25)
  (setq doom-modeline-modal-icon 'evil)
  (setq doom-modeline-buffer-modification-icon t)
  (setq doom-modeline-window-width-limit fill-column)
  (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
  (setq doom-modeline-buffer-modification-icon nil)
  (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode)))


#+end_src

*** Rainbox indentation

#+begin_src emacs-lisp
(require 'rainbow-delimiters)
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** splash screen
#+begin_src emacs-lisp
(require 'dashboard)
(dashboard-setup-startup-hook)
;; Or if you use use-package
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))

#+end_src

#+begin_src emacs-lisp
;; Set the title
;; Makes *scratch* empty.
(setq initial-scratch-message "")

;; Removes *scratch* from buffer after the mode has been set.
(defun remove-scratch-buffer ()
  (if (get-buffer "*scratch*")
      (kill-buffer "*scratch*")))
(add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)
;;(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
(setq dashboard-banner-logo-title nil)
;; Set the banner
(setq dashboard-startup-banner "~/.emacs.d/drawing.png")
;; (setq dashboard-startup-banner nil)
;; Value can be
;; 'official which displays the official emacs logo
;; 'logo which displays an alternative emacs logo
;; 1, 2 or 3 which displays one of the text banners
;; "path/to/your/image.gif", "path/to/your/image.png" or "path/to/your/text.txt" which displays whatever gif/image/text you would prefer

;; Content is not centered by default. To center, set
(setq dashboard-center-content t)

;; To disable shortcut "jump" indicators for each section, set
(setq dashboard-show-shortcuts t)
(setq dashboard-items '((recents  . 15)
                        (bookmarks . 10)))
(setq dashboard-set-heading-icons t)
(setq dashboard-set-file-icons t)
;;(dashboard-modify-heading-icons '((recents . "file-text")
;;                                  (bookmarks . "book")))
(setq dashboard-set-navigator t)
(setq dashboard-set-footer nil)

#+end_src
** Key-bindings 
*** Basic kbds

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

#+begin_src emacs-lisp
;;vterm keybinds

(global-set-key [f2] 'vterm-toggle)
(global-set-key [C-f2] 'vterm-toggle-cd)

#+end_src


This is for my motion

** Better UX experience

This is makes Some points easy.

*** Ivy

#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (:map ivy-minibuffer-map
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
(ivy-explorer-mode 1)
#+end_src

*** Which-key

#+begin_src emacs-lisp
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))
#+end_src

*** Counsel

#+begin_src emacs-lisp
(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :config
  (counsel-mode 1))
#+end_src

*** Ivy-rich

#+begin_src emacs-lisp
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

#+end_src

*** Helpful

#+begin_src emacs-lisp
(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

** Org-mode

Emacs Org mode is super Powerful and super customizable. this is small customization of emacs org mode.

*Org Mode Links* : [[https://orgmode.org/][Homepage]], [[https://orgmode.org/manual/][Manual]] 

*** Basic customization for Org mode

#+begin_src emacs-lisp
(use-package org
  :config
  (setq org-ellipsis " "
	org-hide-emphasis-markers t
  org-indent-mode t))

#+end_src

*Org bullet lists for configure different level of headings. Also, i set list icon to dot in second block*

#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '(" """"""""""""")))
(font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) ""))))))

#+end_src

*** Heading sizes

#+begin_src emacs-lisp
(dolist (face '((org-level-1 . 1.3)
                (org-level-2 . 1.25)
                (org-level-3 . 1.2)
                (org-level-4 . 1.15)
                (org-level-5 . 1.1)
                (org-level-6 . 1.0)
                (org-level-7 . 1.0)
                (org-level-8 . 1.0)))
  (set-face-attribute (car face) nil :font "Merriweather" :weight 'regular :height (cdr face)))


#+end_src
*** Margin setting for Org mode


#+begin_src emacs-lisp
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1)
  (visual-line-mode 1)
  (variable-pitch-mode 1)
  ;;(writeroom-mode 1)
  (electric-pair-mode 0)
  (org-indent-mode 1)
  (hide-mode-line-mode 1))

(use-package visual-fill-column
  :hook '((org-mode . efs/org-mode-visual-fill))
  :hook '((text-mode . efs/org-mode-visual-fill)))
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

*** Font setting for Org mode

#+begin_src emacs-lisp
(use-package mixed-pitch
  :hook
  ;; If you want it in all text modes:
  (text-mode . mixed-pitch-mode)
  :config
  (set-face-attribute 'default nil :font "JetBrains Mono NL" :height 110)
  (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono NL")
  (set-face-attribute 'variable-pitch nil :font "Merriweather" :height 120))

#+end_src

*** Emacs-Org-Babel language support

This is give way to use language in emacs org mode for execution.

 #+begin_src emacs-lisp

 #+end_src

*** Tangle automation
This block help me to tangle automatically everytime i save this file.

 #+begin_src emacs-lisp
(defun efs/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "/home/vijay/myfiles/emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

 #+end_src

*** LaTeX Preview inside org

Well, First you need *dvipng*  from package manager and also, *texlive-extra*. This will help to produce Latex png files.

Techniqly, i can use imagemagick and i always have that but i think that's too big for such task.

#+begin_src emacs-lisp
(setq org-latex-create-formula-image-program 'dvipng)
(plist-put org-format-latex-options :scale 2)
#+end_src
*** Some ideas 

- Check This webiste for imformation about latex and that stuff https://lucidmanager.org/productivity/ricing-org-mode/
- [X]  Also check This bullets 
     (setq org-bullets-bullet-list '("☯" "○" "✸" "✿" "~"))



This is not it. Org mode is much more
** LSP

*** LSP- configuration
#+begin_src emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t))
#+end_src

*** Language configuration

***** CSS

#+begin_src emacs-lisp
(use-package css-mode
  :mode "\\.css\\'"
  :hook (css-mode . lsp-deferred)
  :config
  (setq css-indent-level 4))

#+end_src

***** Python

#+begin_src emacs-lisp
  (use-package python-mode
    :ensure nil
    :hook (python-mode . lsp-deferred))

  (setq python-shell-interpreter "python3.9")
  (setq python-shell-interpreter-args "-i")
  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp))))  ; or lsp-deferred


#+end_src

***** C and C++
#+begin_src emacs-lisp
(add-hook 'c++-mode-hook 'lsp)
(add-hook 'c-mode-hook 'lsp)
;;(add-hook 'objc-mode-hook 'irony-mode)

#+end_src

*** Company

#+begin_src emacs-lisp
(use-package company
  :after lsp-mode
  :hook '((lsp-mode . company-mode)
	  (prog-mode . company-mode))
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))
(use-package company-box
  :hook (company-mode . company-box-mode))
(setq company-box-icons-alist 'company-box-icons-all-the-icons
      company-box-icons-all-the-icons
      (let ((all-the-icons-scale-factor 1)
            (all-the-icons-default-adjust 0))
        `((Unknown       . ,(all-the-icons-faicon "question" :face 'all-the-icons-purple)) ;;question-circle is also good
          (Text          . ,(all-the-icons-faicon "file-text-o" :face 'all-the-icons-green))
          (Method        . ,(all-the-icons-faicon "cube" :face 'all-the-icons-dcyan))
          (Function      . ,(all-the-icons-faicon "cube" :face 'all-the-icons-dcyan))
          (Constructor   . ,(all-the-icons-faicon "cube" :face 'all-the-icons-dcyan))
          (Field         . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
          (Variable      . ,(all-the-icons-faicon "tag" :face 'all-the-icons-dpurple))
          (Class         . ,(all-the-icons-faicon "cog" :face 'all-the-icons-red))
          (Interface     . ,(all-the-icons-faicon "cogs" :face 'all-the-icons-red))
          (Module        . ,(all-the-icons-alltheicon "less" :face 'all-the-icons-red))
          (Property      . ,(all-the-icons-faicon "wrench" :face 'all-the-icons-red))
          (Unit          . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
          (Value         . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
          (Enum          . ,(all-the-icons-faicon "file-text-o" :face 'all-the-icons-red))
          (Keyword       . ,(all-the-icons-material "format_align_center" :face 'all-the-icons-red :v-adjust -0.15))
          (Snippet       . ,(all-the-icons-material "content_paste" :face 'all-the-icons-red))
          (Color         . ,(all-the-icons-material "palette" :face 'all-the-icons-red))
          (File          . ,(all-the-icons-faicon "file" :face 'all-the-icons-red))
          (Reference     . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
          (Folder        . ,(all-the-icons-faicon "folder" :face 'all-the-icons-red))
          (EnumMember    . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
          (Constant      . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
          (Struct        . ,(all-the-icons-faicon "cog" :face 'all-the-icons-red))
          (Event         . ,(all-the-icons-faicon "bolt" :face 'all-the-icons-red))
          (Operator      . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
          (TypeParameter . ,(all-the-icons-faicon "cog" :face 'all-the-icons-red))
          (Template      . ,(all-the-icons-faicon "bookmark" :face 'all-the-icons-dgreen)))))
#+end_src

** Structural Templates

This is structural for creating source blocks in org mode, this list will give idea... 

- py -- src python 
- el -- src emacs-lisp 
- sh -- src shell
- a -- export ascii 
- c -- center
- C -- comment) 
- e -- example 
- E -- export 
- h -- export html
- l -- export latex 
- q -- quote
- s -- src
- v -- verse


 #+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

** Terminal

*** Term-mode

*vterm github page*:
[[https://github.com/akermu/emacs-libvterm]]

*Eshell Official page*:
[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html]]

I'm using vterm but i just congiguring Eshell

#+begin_src emacs-lisp
(defun efs/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt
  :after eshell)

(use-package eshell
  :hook (eshell-first-time-mode . efs/configure-eshell)
  :config

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim")))

  (eshell-git-prompt-use-theme 'robbyrussell))
#+end_src

#+begin_src emacs-lisp
(use-package vterm
    :ensure t)
#+end_src
* Other 
** Latex mode

*** Basic

#+begin_src emacs-lisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)

(add-hook 'LaTeX-mode-hook 'writeroom-mode)
;;(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
;;(add-hook 'LaTex-mode-hook 'display-line-numbers-mode 0)

(setq TeX-PDF-mode t)

;;(require 'tex)
;;(TeX-global-PDF-mode t)

;;(define-abbrev-table 'TeX-mode-abbrev-table (make-abbrev-table))
;;(add-hook 'TeX-mode-hook (lambda ()
;;  (setq abbrev-mode t)
;;  (setq local-abbrev-table TeX-mode-abbrev-table)))

#+end_src
    
